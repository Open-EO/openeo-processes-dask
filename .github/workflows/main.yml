name: Tests

on:
  push:
    paths-ignore:
      - 'docs/**'
    branches:
      - main
  pull_request:
    paths-ignore:
      - 'docs/**'
    branches:
      - '**'
  workflow_dispatch:

env:
  POETRY_VERSION: 1.5.1

jobs:
  tests:
    name: ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        os: [Ubuntu]
        python-version: ["3.10", "3.11", "3.12"]
        include:
          - os: Ubuntu
            image: ubuntu-24.04
      fail-fast: false
    defaults:
      run:
        shell: bash -l {0}   # <-- login shell so micromamba activation sticks
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # Set up micromamba (conda) and create the env from conda-forge
      - name: Set up micromamba (conda)
        uses: mamba-org/setup-micromamba@v1
        with:
          micromamba-version: "1.5.8"
          environment-name: testenv
          create-args: >-
            python=${{ matrix.python-version }}
            gdal=3.11.4
          channels: conda-forge
          channel-priority: strict
          init-shell: bash
          cache-environment: true
          cache-downloads: true

      - name: Show GDAL from conda
        run: |
          which gdalinfo
          gdalinfo --version
          conda list gdal || micromamba list gdal

      - name: Get full Python version
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT

      # Install Poetry *into the active conda env*
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install "poetry==${POETRY_VERSION}"
          poetry --version

      # Make Poetry use the current conda env (no separate venv)
      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create false
          poetry config installer.max-workers 4

      # (Optional) Cache Poetryâ€™s artifact downloads to speed up installs
      - name: Cache Poetry downloads
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry/artifacts
          key: poetry-artifacts-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install project dependencies
        run: |
          # TIP: Ensure you do NOT depend on the PyPI 'gdal' wheel in pyproject.
          # Rely on conda-forge GDAL provided above.
          poetry install --with dev --all-extras

      - name: Pre-commit hooks
        run: poetry run pre-commit run --all-files

      - name: Run tests
        run: poetry run pytest --cov=openeo_processes_dask --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
